import static org.assertj.core.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class CalculatorTest {

    private final Calculator calculator = new Calculator();

    @Test
    void shouldReturnCorrectDiscountedPrice() {
        // Корректный расчет стоимости с учетом скидки
        assertThat(calculator.calculateDiscount(100, 10))
                .as("Цена должна уменьшиться на 10%")
                .isCloseTo(90, within(0.001)); // Ожидаемый результат с точностью до тысячных долей

        assertThat(calculator.calculateDiscount(200, 50))
                .as("Цена должна уменьшить ровно вдвое")
                .isCloseTo(100, within(0.001));
    }

    @Test
    void shouldThrowArithmeticExceptionForInvalidDiscounts() {
        // Неправильные проценты скидок вызывают исключение
        assertThatThrownBy(() -> calculator.calculateDiscount(100, -1))
                .isInstanceOf(ArithmeticException.class)
                .hasMessageContaining("Процент скидки должен быть между 0 и 100.");

        assertThatThrownBy(() -> calculator.calculateDiscount(100, 101))
                .isInstanceOf(ArithmeticException.class)
                .hasMessageContaining("Процент скидки должен быть между 0 и 100.");
    }

    @Test
    void zeroValuesShouldBeHandledProperly() {
        // Случаи с нулями обрабатываются корректно
        assertThat(calculator.calculateDiscount(0, 0))
                .as("Стоимость товара равна нулю, скидка тоже ноль")
                .isEqualTo(0);

        assertThat(calculator.calculateDiscount(100, 0))
                .as("Нет скидки, цена остается прежней")
                .isEqualTo(100);
    }
}
