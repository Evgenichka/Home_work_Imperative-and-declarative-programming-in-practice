# Условие
# На вход подается число n.
#● Задача
#Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n.
#Обоснуйте выбор парадигм.
#● Пример вывода:
#1 * 1 = 1
#1 * 2 = 2
#1 * 3 = 3
#1 * 4 = 4
#1 * 5 = 5
#1 * 6 = 6
#..
#1 * 9 = 9

            # Каждая из парадигм удобна для определенных случаев, поэтому считаю корректным выбор обеих парадигм, пример кода и комментарии ниже:


# 1. Таблица умножения (структурная парадигма)

# Число n вводится пользователем
n = int(input("Введите число n: "))

# Внешний цикл перебирает множители первой колонки
for i in range(1, n + 1):
    # Внутренний цикл перебирает множители второй колонки
    for j in range(1, n + 1):
        # Форматированный вывод операции умножения
        print(f"{i} * {j} = {i * j}")
    # Перевод строки после завершения одной строки таблицы
    print()


                                #Зачем я выберу структурную парадигму?
                                            #Простота и наглядность: Скрипт выполняется последовательно и понятно. Логика разбита на шаги, каждый из которых очевиден.
                                            #Легкость поддержки: Небольшие фрагменты кода удобно читать и поддерживать.
                                            #Эффективность: Алгоритм работает быстро и эффективно для небольшого диапазона чисел.
                                #Реализация:
                                            #Программа представлена одним основным блоком кода, организованным с помощью вложенных циклов.



# 2. Таблица умножения (Процедурная парадигма)

# Процедура печати таблицы умножения
def print_multiplication_table(n):
    """Процедура вывода таблицы умножения"""
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            print(f"{i} * {j} = {i * j}")
        print()  # пустая строка между рядами

# Запрашиваем у пользователя число n
n = int(input("Введите число n: "))

# Вызываем процедуру для вывода таблицы
print_multiplication_table(n)



                                  # Почему выберу процедурную парадигму?
                                            # Четкая организация: Вся логика делится на маленькие части, что облегчает разработку и поддержку программы.
                                            # Читабельность: Каждая процедура выполняет одну простую задачу, что делает код легким для понимания.
                                            # Минимальная нагрузка: Так как задача достаточно простая (строится таблица умножения), процедурная парадигма прекрасно справляется с задачей без избыточных абстракций.
                                  # Реализация:
                                            # Основная идея заключается в создании отдельной процедуры, которая выводит таблицу умножения. Главная программа лишь запрашивает значение переменной n
                                            # n, передает её процедуре и выводит результат.









